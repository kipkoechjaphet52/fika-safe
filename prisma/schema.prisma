// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id          String  @id @default(uuid())
  firstName   String
  secondName  String
  email       String  @unique
  password    String
  phoneNumber String  @unique
  profilePic  String?
  userRole    UserRole @default(EMERGENCY_RESPONDER)
  createdAt   DateTime @default(now())
  reports     Report[]
}

model User {
  id          String  @id @default(uuid())
  firstName   String
  secondName  String
  email       String  @unique
  password    String
  phoneNumber String  @unique
  profilePic  String?
  userRole    UserRole @default(USER)
  reports     Report[]
  alerts      Alert[]
  createdAt   DateTime @default(now())
  routes      Route[]
}

model Report {
  id          String  @id @default(uuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  location    String  // Address or coordinates
  latitude    Float
  longitude   Float
  type        IncidentType
  severity    SeverityLevel
  description String
  mediaUrl    String   // Store image or video URL
  mediaType   MediaType 
  status      ReportStatus @default(PENDING)
  verification ReportVerification @default(UNVERIFIED)
  verifierId  String?  // Admin or authority who verified the report
  verifier    Staff?    @relation(fields: [verifierId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Alert {
  id          String  @id @default(uuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  message     String
  status      AlertStatus @default(UNREAD)
  createdAt   DateTime @default(now())
}

model Route {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  origin    String
  destination String
  routeData Json    // Store alternative routes
  createdAt DateTime @default(now())
}

model EmergencyContact {
  id        String  @id @default(uuid())
  name      String
  phone     String  @unique
  type      ContactType
}

enum UserRole {
  USER
  ADMIN
  POLICE
  EMERGENCY_RESPONDER
}

enum IncidentType {
  THEFT
  ASSAULT
  ACCIDENT
  FIRE
  MEDICAL
  OTHER
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ReportVerification {
  VERIFIED
  UNVERIFIED
}

enum AlertStatus {
  UNREAD
  READ
}

enum ContactType {
  POLICE
  AMBULANCE
  CARRIER
}