generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id          String   @id @default(uuid())
  firstName   String
  secondName  String
  phoneNumber String   @unique
  email       String   @unique
  password    String
  profilePic  String?
  userRole    UserRole @default(CARRIER)
  reports     Report[]
  locations    StaffLocation[]
  emergencyContacts EmergencyContact[]
}

model StaffLocation {
  id        String   @id @default(uuid())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  timestamp DateTime @default(now()) // Tracks when the location was recorded
}

model User {
  id          String         @id @default(uuid())
  firstName   String
  secondName  String
  phoneNumber String         @unique
  email       String         @unique
  password    String
  profilePic  String?
  createdAt   DateTime       @default(now())
  userRole    UserRole       @default(USER)
  alerts      Alert[]
  reports     Report[]
  routes      Route[]
  locations   UserLocation[]
}

model UserLocation {
  id        String   @id @default(uuid())
  userId    String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id                 String             @id @default(uuid())
  userId             String
  location           String
  latitude           Float
  longitude          Float
  type               IncidentType
  severity           SeverityLevel
  description        String
  mediaUrl           String?
  mediaType          MediaType
  verifierId         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  verificationStatus VerificationStatus @default(UNVERIFIED)
  title              String
  alerts             Alert[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifier           Staff?             @relation(fields: [verifierId], references: [id], onDelete: Cascade)
}

model Alert {
  id        String      @id @default(uuid())
  userId    String
  message   String
  status    AlertStatus @default(UNREAD)
  createdAt DateTime    @default(now())
  reportId  String
  report    Report      @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Route {
  id          String   @id @default(uuid())
  userId      String
  origin      String
  destination String
  routeData   Json
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id    String      @id @default(uuid())
  name  String
  phone String      @unique
  contactType       ContactType
  staffId String
  staff Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  POLICE
  AMBULANCE
  CARRIER
}

enum IncidentType {
  THEFT
  ASSAULT
  ACCIDENT
  FIRE
  MEDICAL
  OTHER
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MediaType {
  IMAGE
  VIDEO
}

enum VerificationStatus {
  VERIFIED
  UNVERIFIED
  PENDING
  APPROVED
  REJECTED
}

enum ContactType {
  POLICE
  AMBULANCE
  CARRIER
}

enum AlertStatus {
  UNREAD
  READ
}
